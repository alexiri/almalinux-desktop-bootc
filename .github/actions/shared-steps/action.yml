name: "Build and Push"

inputs:
  IMAGE_NAME:
    required: true
  VERSION_MAJOR:
    required: true
  VARIANT:
    required: true
  DATE_STAMP:
    required: true
  IMAGE_REGISTRY:
    required: true
  IMAGE_DEST:
    required: true
  REGISTRY_USER:
    required: true
  REGISTRY_PASSWORD:
    required: true
runs:
  using: "composite"
  steps:
    # Need to rewrite this to figure out if the image of that date is already built instead
    - name: Check update
      shell: bash
      run: |
        # 'dnf check-update'
        # exit codes:
        #   0 - no updates
        #   100 - updates available
        #   125 - tag/platform not found
        #   127 - command not found
        # res=0
        # podman run --quiet --rm ${{ inputs.IMAGE_REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{ inputs.VERSION_MAJOR }} dnf check-update || res=$?
        # echo "res=${res}" >> "$GITHUB_ENV"
        # echo "Exit code: '$res'"
        echo "res=-1" >> "$GITHUB_ENV"

    - name: Build image
      if: ${{ env.res != 0 }}
      shell: bash
      run: |
        make bootc-image \
          MAJOR=${{ inputs.VERSION_MAJOR }} \
          VARIANT=${{ inputs.VARIANT }} \
          ARCH=${{ env.PLATFORM }} \
          IMAGE_NAME=${{ inputs.IMAGE_NAME }}

    - name: Run Image
      if: ${{ env.res != 0 }}
      shell: bash
      run: |
        # Let's see if we have something that makes sense
        podman run --rm -ti ${{ inputs.IMAGE_NAME }} bootc --version

        # Let the image tell you what it is
        VERSION_ID=$(podman run --rm -ti ${{ inputs.IMAGE_NAME }} grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2 | tr -d '"')
        echo "VERSION_ID=${VERSION_ID}" >> "$GITHUB_ENV"

    - name: Log in to registry
      if: ${{ env.res != 0 }}
      shell: bash
      run: podman login ${{ inputs.IMAGE_REGISTRY }} -u ${{ inputs.REGISTRY_USER }} -p ${{ inputs.REGISTRY_PASSWORD }}

    - name: Push to registry
      if: ${{ env.res != 0 }}
      shell: bash
      run: |
        # Tag: VERSION_MAJOR.VERSION_MINOR-DATE_STAMP-ARCH
        podman push ${{ inputs.IMAGE_NAME }} --digestfile=/tmp/digestfile \
          docker://${{ inputs.IMAGE_DEST }}/${{ inputs.IMAGE_NAME }}:${{ env.VERSION_ID }}-${{ inputs.DATE_STAMP }}-${{ env.ARCH }}

        DIGEST=$(cat /tmp/digestfile)
        echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
        echo "IMAGE=$IMAGE_REGISTRY/$IMAGE_NAME" >> $GITHUB_OUTPUT
