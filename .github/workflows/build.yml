name: Build image
on:
  workflow_dispatch:
    inputs:
      RELEASE:
        description: 'AlmaLinux release'
        required: true
        default: '10-kitten'
        type: choice
        options:
          - 10-kitten
          #- 10
      VARIANT:
        description: 'Desktop variant'
        required: true
        default: 'gnome'
        type: choice
        options:
          - gnome
          - plasma
      PLATFORM:
        description: 'Platform'
        required: true
        default: 'amd64'
        type: choice
        options:
          - amd64
          - arm64

  schedule:
    # run every day at 05:00 UTC (AlmaLinux bootc images are built at 03:00 UTC)
    - cron:  '00 05 * * *'

  push:
    branches:
      - master
    paths-ignore:
      - '*.md'

env:
  LATEST_MAJOR: 10-kitten
  VERSIONS_LIST: '"10-kitten"' # TODO: Add 10 when it is released
  VARIANT_LIST: '"gnome", "plasma"'
  PLATFORM_LIST: '"amd64"' # TODO: ignore ARM for now, "arm64"'
  IMAGE_DEST: 'ghcr.io/${{ github.repository_owner }}'

jobs:
  set-versions-matrix:
    name: Set versions matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      date_stamp: ${{ steps.date-stamp.outputs.date_stamp }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          # Format json for versions matrix
          case ${{ github.event_name }} in
            workflow_dispatch)
              VERSION_MAJOR='"${{ inputs.RELEASE }}"'
              VARIANT='"${{ inputs.VARIANT }}"'
              PLATFORM='"${{ inputs.PLATFORM }}"'
              ;;
            *)
              VERSION_MAJOR='${{ env.VERSIONS_LIST }}'
              VARIANT='${{ env.VARIANT_LIST }}'
              PLATFORM='${{ env.PLATFORM_LIST }}'
              ;;
          esac
          echo "matrix=$(echo "{\"VERSION_MAJOR\": [${VERSION_MAJOR}], \"VARIANT\": [${VARIANT}], \"PLATFORM\": [${PLATFORM}] }" | jq -c)" >> $GITHUB_OUTPUT

      - name: Date stamp
        id: date-stamp
        run: |
          # date stamp
          date_stamp=$(date -u '+%Y%m%d')
          [ "x${date_stamp}" != "x" ] && echo "date_stamp=${date_stamp}" >> "$GITHUB_OUTPUT"

  build:
    name: Build image
    runs-on: ${{ matrix.PLATFORM == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    needs: [set-versions-matrix]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set-versions-matrix.outputs.matrix)}}

    env:
      PLATFORM: "linux/${{ matrix.PLATFORM }}"
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ./.github/actions/shared-steps
      name: Build and Push
      id: build_and_push
      with:
        IMAGE_NAME: almalinux-${{ matrix.VARIANT }}
        VERSION_MAJOR: ${{ matrix.VERSION_MAJOR }}
        VARIANT: ${{ matrix.VARIANT }}
        DATE_STAMP: ${{ env.DATE_STAMP }}
        IMAGE_REGISTRY: ghcr.io # ${{ secrets.IMAGE_REGISTRY }}
        IMAGE_DEST: ${{ env.IMAGE_DEST }}
        REGISTRY_USER:  ${{ github.actor }} # ${{ secrets.REGISTRY_USER }}
        REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }} # ${{ secrets.REGISTRY_PASSWORD }}

  push-manifest:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    name: Push manifest
    needs: [set-versions-matrix, build]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{fromJson(needs.set-versions-matrix.outputs.matrix).VERSION_MAJOR}}
        VARIANT: ${{fromJson(needs.set-versions-matrix.outputs.matrix).VARIANT}}
    env:
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}
      IMAGE_NAME: almalinux-${{ matrix.VARIANT }}

    steps:
      - name: Set environment
        run: |
          # Minor version for both amd64 and arm64
          for MACHINE in x86_64 aarch64; do
            VERSION_MINOR=
            release=${{ matrix.VERSION_MAJOR }}
            if [[ "${{ matrix.VERSION_MAJOR }}" != *'kitten'* ]]; then
              almalinux_release=https://repo.almalinux.org/almalinux/almalinux-release-latest-${{ matrix.VERSION_MAJOR }}.${MACHINE}.rpm
              # TODO: remove when AlmaLinux 10.0 is released
              [ "${{ matrix.VERSION_MAJOR }}" = "10" ] && almalinux_release=https://vault.almalinux.org/almalinux-release-latest-10-beta.${MACHINE}.rpm
              release=$(rpm -q --qf="%{VERSION}\n" ${almalinux_release} 2>/dev/null)
              VERSION_MINOR=.$(cut -d '.' -f 2 <<< "$release")
            fi
            echo "VERSION_MINOR_${MACHINE}=${VERSION_MINOR}" >> "$GITHUB_ENV"
            echo "[Debug] MACHINE=${MACHINE} release=$release VERSION_MINOR=${VERSION_MINOR}"
            unset VERSION_MINOR release
          done

      - name: Login to registry (docker)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io # ${{ secrets.IMAGE_REGISTRY }}
          username: ${{ github.actor }} # ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.GITHUB_TOKEN }} # ${{ secrets.REGISTRY_PASSWORD }}

      - name: Create and push manifest (docker)
        run:  |
          # Manifest for both amd64 and arm64
          amd64_exists=0
          arm64_exists=0
          docker manifest inspect ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${{ matrix.VERSION_MAJOR }}${{ env.VERSION_MINOR_x86_64 }}-${{ env.DATE_STAMP }}-amd64 >/dev/null 2>&1 \
            || amd64_exists=$?
          docker manifest inspect ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${{ matrix.VERSION_MAJOR }}${{ env.VERSION_MINOR_aarch64 }}-${{ env.DATE_STAMP }}-arm64 >/dev/null 2>&1 \
            || arm64_exists=$?
          [ $amd64_exists -ne 0 -o $arm64_exists -ne 0 ] && exit 0

          # Don't push manifest if amd64 and arm64 minor versions differ
          VERSION_MINOR=${{ env.VERSION_MINOR_x86_64 }}
          [ "${{ env.VERSION_MINOR_x86_64 }}" != "${{ env.VERSION_MINOR_aarch64 }}" ] && exit 0

          # Loop over need tags: latest, VERSION_MAJOR, VERSION_MAJOR.VERSION_MINOR, VERSION_MAJOR.VERSION_MINOR-DATE_STAMP
          tags="latest ${{ matrix.VERSION_MAJOR }} ${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}"
          [[ ${{ matrix.VERSION_MAJOR }} != *'kitten'* ]] && tags="${tags} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}"
          for tag in $tags; do
              [ ${{ matrix.VERSION_MAJOR }} != ${{ env.LATEST_MAJOR }} -a "${tag}" = "latest" ] && continue
              docker manifest create ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${tag} \
                  ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}-amd64 \
                  ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}-arm64

              docker manifest inspect ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${tag}

              docker manifest push ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${tag}
          done

  build-iso:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    name: Build ISO
    needs: [set-versions-matrix, build]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set-versions-matrix.outputs.matrix)}}
    env:
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}
      IMAGE_NAME: almalinux-${{ matrix.VARIANT }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@anaconda-webui-format
        with:
          image-ref: ${{ env.IMAGE_DEST }}/${{ env.IMAGE_NAME }}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-${{ matrix.PLATFORM }}
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_iso.sh

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          ISO_NAME="${{ env.IMAGE_NAME }}-${{ env.DATE_STAMP }}-${{ matrix.PLATFORM }}.iso"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${ISO_NAME}-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${ISO_NAME}"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ env.DATE_STAMP }}-${{ matrix.platform }}-iso
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}
